[{"categories":null,"content":" 注意\r本文环境基于Ubuntu20.04系统\r既然本站域名包含sudo，那么大家就一起了解下sudo这个命令吧。 sudo这个程序，是由 Bob Coggeshall 和 Cliff Spencer 在上世纪80年左右在一台运行4.1 BSD的机器VAX-11/750上实现的。在随后的岁月中，逐渐演变成了现在的样子。 首先，当你安装Ubuntu的桌面版或者服务器版本的过程中，系统会让用户输入一个用户名以及密码（很多VPS默认使用root用户），而用户输入的用户名不能是root，这是因为Ubuntu系统中root用户是自带的，并且在你安装好系统后，root用户默认是非激活状态，这也就是有些人在刚装好系统后不知道我的root用户默认密码是多少的原因。 如果实在想激活root用户，执行 sudo -i ，然后执行 passwd 设置个密码就激活了root用户。 如果后悔了，可以运行 sudo passwd -dl root 就可以disable root用户了。运行 su 会发现，进不去root用户。 那么如何使用root的权限来执行命令呢？sudo可以解决这个问题。其实当你进入刚刚安装好的系统后，Ubuntu默认将你创建的用户加入到了sudo用户组，也就是拥有了root的所有权限。 ","date":"2022-06-12","objectID":"/what-is-sudo/:0:0","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"1. 举个栗子 我们通过个例子来说一下，在我的机器上已经有一个叫 test 的用户，并且在sudo组当中，所以test用户可以执行root的所有可执行的命令。 ","date":"2022-06-12","objectID":"/what-is-sudo/:1:0","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"1.1 创建用户 首先在机器上先添加一个叫tristan的用户，执行 sudo adduser tristan ,输入密码后一路回车，然后执行 su - tristan 来切换到刚刚创建的用户tristan，接着执行 sudo apt update ，可以看到，新创建的tristan用户是无法使用root权限的，因为不在sudo用户组当中，执行groups可以看到tristan仅仅在tristan这个用户组当中。 ","date":"2022-06-12","objectID":"/what-is-sudo/:1:1","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"1.2 拉人入伙 此时，切换回有sudo权限的用户 su - test，执行 sudo groups tristan ，可以看到tristan只在他自己的组当中，然后执行 sudo adduser tristan sudo 或者 sudo usermod -aG sudo tristan 来将tristan这个用户加入到sudo组当中，再次执行 sudo groups tristan ，可以看到tristan这个用户已经被加入到了sudo组中，拥有了root权限。 ","date":"2022-06-12","objectID":"/what-is-sudo/:1:2","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"1.3 sudoers介绍 而sudo组有哪些权限呢？执行 sudo cat /etc/sudoers 可以看到下面的内容 第一印象是，怎么这么多ALL？ 第一个ALL可以理解为代表本机，括号里的第一个ALL代表所有用户，冒号后面的ALL代表所有组，括号后面的ALL代表所有命令。 root 开头的这行的意思是，root用户可以执行本机上所有群组里面所有用户可以执行的所有命令。 %admin 中%代表群组，这样的意思就是 admin 这个组的用户可以执行所有命令。 最关键的是 %sudo 这行，意思和 %admin 这行一样，可以执行所有权限。 那么为什么既然有了 admin 这个组，还会有 sudo这个组呢？这个是ubuntu的历史遗留问题，根据Ubuntu 12.04 LTS的release note中，说在Ubuntu 11.10之前，一直使用的admin这个组，但是从12.04开始使用sudo这个组了。包括 %admin 这行的写法和其他行不一样，应该也是同样的原因。好像Debian中从未有过 admin 这个组，一直都是 sudo 这个组，并且Debian系统中root用户是默认激活的。 ","date":"2022-06-12","objectID":"/what-is-sudo/:1:3","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"1.4 还是栗子 知道了 /etc/sudoers 这个文件，就可以解决下面的问题了，如果只想给某个用户分配部分只能root权限执行的程序，只需要在root这样下面加上用户名和想赋予执行程序的路径就可以了。编辑这个文件时，最好使用 visudo 命令，这个工具可以避免多人同时编辑sudoers文件，并且带有语法检查功能。 比如，我们在机器上添加 test2 这个用户，如何在不把他加入sudo组的前提下执行sudo apt update命令呢？ sudo adduser test2 sudo groups test2 #查看test2用户的群组 sudo visudo 在root这行下面加入一行 test2 ALL=(ALL:ALL) /usr/bin/apt 保存退出，然后切换到新创建的 test2 用户， su - test2 ，就可以执行 apt update命令了，运行 groups 命令可以发现，test2 用户不在sudo组当中，所以无法执行 apt update 命令。 试着执行下其他root命令： 可以看到，没有权限。 可以执行 sudo -l 查看当前用户都可以执行哪些root才能执行的命令 如果你觉得执行需要输入密码比较麻烦的话，可以将sudoers里面的写成下面这样： test2 ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt ","date":"2022-06-12","objectID":"/what-is-sudo/:1:4","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"2. sudo存在的意义 既然用户可以添加sudo来执行root才能执行的命令，那么sudo存在的意义是什么呢？其实，包括我在内，尤其是在VPS上时候，都是直接root登录的。 ","date":"2022-06-12","objectID":"/what-is-sudo/:2:0","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"2.1 优点 使用sudo而不直接使用root用户的优点有下面几个 不用单独再记住root的密码，哪怕root用户默认没有激活也可以。 网络上那些频繁尝试通过暴力破解登录你VPS的人只知道root这个用户一定存在，而不知道你有sudo权限的用户名是什么，就像Ubuntu这样默认禁止root用户的情况下，有人想暴力破解你VPS的密码，还必须知道你的用户名是什么，这样概率会小很多很多。 当删除用户时方便，直接删除有sudo权限的用户即可，如果直接使用root用户，还得修改root密码，这样给其他人造成不便。 可以赋予某个用户执行部分sudo程序的权限，就像上面例子展示的一样。 每个用户可以根据自己习惯修改自己的配置文件，比如vi等很多软件，如果都使用root，会造成不便。 ","date":"2022-06-12","objectID":"/what-is-sudo/:2:1","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"2.2 缺点 命令行提示符前面的名称不是root，看着不爽啊。 运行sudo需要经常输入密码，也不爽。尽管可以在/etc/sudoers文件中设置下不输入密码。 运行命令时经常忘记打sudo，这时候可以使用 sudo !!而不用按上箭头，再在命令行前面加sudo了。 ","date":"2022-06-12","objectID":"/what-is-sudo/:2:2","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"2.3 习惯养成 就VPS而言，这样做更安全： ssh配置文件中屏蔽root登录 Ubuntu中再将root用户设为非激活状态 屏蔽密码登录，只允许证书登录 证书必须加密，否则证书万一被其他人知道了，麻烦就到了。 更多关于sudo的可以看man. ","date":"2022-06-12","objectID":"/what-is-sudo/:2:3","tags":["sudo","ubuntu","vps"],"title":"What Is Sudo","uri":"/what-is-sudo/"},{"categories":null,"content":"把博客从WordPress搬家到了hugo，托管到了Github上，耗时一天。近期还会研究下hugo和这个主题，添加一些CSS。 原来的博客和域名还会继续存在，但是可能不会更新了。 最近搭建了Mastodon和Matrix。发现Mastodon使用频率高很多，而Matrix使用下来体验一般般，客户端还需要加把劲，synapse使用python写的，同步人数较多的群的历史信息时会比较慢，并且加入一个大群时，很多时候会失败。 Pixelfed实例近期也会上线。 git remote -v git remote rm origin git remote add origin git@github.com:photowalk/photowalk.github.io.git hugo new posts/test/index.md hugo server -D #本地预览 localhost:1313 hugo cd public git add . git commit -m 'change note' git push -u origin master 今年得想办法置办个这玩意儿，从第一代出来就想买了 ","date":"2022-06-11","objectID":"/moving-to-hugo/:0:0","tags":["wordpress","hugo"],"title":"Moving to Hugo","uri":"/moving-to-hugo/"},{"categories":null,"content":" For the past one month, I’ve been digging around the internet about the decentralized fediverse community. Platforms like Mastodon, Matrix Synapse, Pixelfed etc are the open-source implementations of twitter, IMs like telegram Signal and instagram, and more importantly these platforms are all decentralized, which means your posts/pics/blog/account belongs to yourself, and won’t be deleted by those BIG companies for no reason, especially those stupid companies in China like weibo, bilibili, douyin etc. Ad-free, no user privacy tracking/leaking are also advantages of the fediverse platforms. Up to now, I’ve tried my hand on Soapbox FE, Matrix Synapse and got them successfully running on my VPS. This post mainly focuses on the installation of Matrix Synapse which was written in Python. There is a Go version of Matrix - Dendrite. It’s more efficient and maybe the VPS hardware requirements aren’t that high. But it’s still in the beta version, not recommended for the production environment. Minimal VPS Specs: 1-core vCPU, 1G of RAM, here is the utilization of Synapse running on my VPS(just 1 user), 2G RAM is recommended for users less than 20. The OS is Ubuntu 20.04. I’ve made a test video call between my 2 phones, the CPU ( Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz ) usage is around 25%, so a 2-core CPU is recommended. I want to use the base domain as part of the user name, like @user:domain.org, instead of @user:matrix.domain.org which is the actual server address. In this case, you can host other websites with the base domain example.org. Let’s get rolling! ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:0:0","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"1. Install matrix synapse package ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:1:0","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"1.1 Installation sudo apt update sudo apt upgrade -y sudo apt install lsb-release wget apt-transport-https -y sudo wget -qO /usr/share/keyrings/matrix-org-archive-keyring.gpg https://packages.matrix.org/debian/matrix-org-archive-keyring.gpg sudo echo \"deb [signed-by=/usr/share/keyrings/matrix-org-archive-keyring.gpg] https://packages.matrix.org/debian/ $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/matrix-org.list sudo apt update sudo apt upgrade sudo apt install matrix-synapse-py3 One window will pop up, enter the base domain name example.org, NOT matrix.example.org, it’s very important. Hit OK and then NO. sudo systemctl enable matrix-synapse sudo systemctl start matrix-synapse sudo systemctl status matrix-synapse Go through the log file if synapse is not running: sudo tail -f /var/log/matrix-synapse/homeserver.log Make sure again by typing: sudo netstat -lnpt | grep :8008 ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:1:1","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"1.2 Change the configurations: Generate the Matrix Synapse registration secret: cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 Edit the synapse config file: sudo nano /etc/matrix-synapse/homeserver.yaml Press Ctrl+w to find registration_shared_secret: uncomment it and change the value with the generated random string. Find the following lines and change the value correspondingly: enable_registration: false allow_public_rooms_without_auth: false allow_public_rooms_over_federation: false Press Ctrl+o to save the file and Ctrl+x to exit. Then restart the synapse service: sudo systemctl restart matrix-synapse Again, if anything goes wrong, check out the log file. sudo tail -f /var/log/matrix-synapse/homeserver.log ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:1:2","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"1.3 Install Nginx and certbot apt install nginx certbot python3-certbot-nginx -y Generate the SSL certificates: sudo systemctl stop nginx sudo certbot certonly -d example.org -d matrix.example.org ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:1:3","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"1.4 Create Nginx config files 1.4.1 Base domain config file cd /etc/nginx/sites-available sudo nano example.org Change the contents to: server { root /var/www/example.org; # You can host another website here or do a reverse proxy. # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; server_name example.org; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; } location /.well-known/matrix/client { # pay attention here, help clients like element to find the actual address. return 200 '{\"m.homeserver\": {\"base_url\": \"matrix.example.org\u003c/a\u003e\"}}'; default_type application/json; add_header Access-Control-Allow-Origin *; } location /.well-known/matrix/server { return 200 '{\"m.server\": \"matrix.example.org:443\"}'; default_type application/json; add_header Access-Control-Allow-Origin *; } listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl; # managed by Certbot ssl_certificate /etc/letsencrypt/live/example.org/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot } server { if ($host = example.org) { return 301 https://$host$request_uri; } # managed by Certbot listen 80; listen [::]:80; server_name example.org; return 404; # managed by Certbot } 1.4.2 Subdomain config file sudo nano matrix.example.org Change the content to: server { listen 443 ssl http2; listen [::]:443 ssl http2; # make your synapse instance federated. listen 8448 ssl http2; listen [::]:8448 ssl http2; server_name matrix.example.org; ssl_certificate /etc/letsencrypt/live/matrix.example.org/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/matrix.example.org/privkey.pem; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384; ssl_session_timeout 10m; ssl_session_cache shared:SSL:10m; ssl_session_tickets on; ssl_stapling on; ssl_stapling_verify on; location ~ ^(/_matrix|/_synapse/client) { # note: do not add a path (even a single /) after the port in `proxy_pass`, # otherwise nginx will canonicalise the URI and cause signature verification # errors. proxy_pass http://127.0.0.1:8008; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $host; # Nginx by default only allows file uploads up to 1M in size # Increase client_max_body_size to match max_upload_size defined in homeserver.yaml client_max_body_size 200M; # support file size up to 200MB } # make your synapse instance federated. location / { proxy_pass http://localhost:8008; proxy_set_header X-Forwarded-For $remote_addr; } } server { if ($host = matrix.example.org) { return 301 https://$host$request_uri; } # managed by Certbot listen 80; listen [::]:80; server_name matrix.example.org; return 404; # managed by Certbot } Link the config file to sites-enables folder and restart nginx ln -s /etc/nginx/sites-available/example.org /etc/nginx/sites-enabled/ ln -s /etc/nginx/sites-available/matrix.example.org etc/nginx/sites-enabled/ nginx -t systemctl restart nginx ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:1:4","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"2. Setting up Postgres Issue the following commands: sudo apt install postgresql postgresql-contrib sudo -i -u postgres --database user and password CREATE USER \"synapseuser\" WITH PASSWORD 'Password'; CREATE DATABASE synapse ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0 OWNER \"synapseuser\"; exit sudo apt install python3-psycopg2 Edit synapse config file: sudo nano /etc/matrix-synapse/homeserver.yaml Since I’ll use PostgreSQL instead of sqlite3, comment out the following lines: # database: # name: sqlite3 # args: # database: /path/to/homeserver.db Uncomment the following lines: database: name: psycopg2 txn_limit: 10000 args: user: synapseuser password: password # enter the database username \u0026 password created above. database: synapse host: localhost port: 5432 cp_min: 5 cp_max: 10 Looks like this: Change public_baseurl to the real domain matrix.example.org (IMPORTANT!): Find and change maximum file size to 200M max_upload_size: 200M Since the file size has been changed in the nginx config file of matrix.example.org, there is 1 more place need to be changed: sudo nano /etc/nginx/nginx.conf Add the following line in http section: client_max_body_size 200M; Save \u0026 exit. Restart synapse \u0026 nginx: sudo systemctl restart matrix-synapse sudo nginx -t sudo systemctl restart nginx Enable ports: ufw allow OpenSSH ufw allow 'Nginx Full' ufw allow 8448 Visit https://matrix.example.org:8448, you’ll get this page: Visit https://federationtester.matrix.org/ , enter the base domain example.org to test if everything is OK. ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:2:0","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"3. Create the admin account register_new_matrix_user -c /etc/matrix-synapse/homeserver.yaml http://localhost:8008 Type name \u0026 password, and then type yes when asked if make it admin. Visit https://app.element.io/#/login to login. Click Edit at the upper-right corner of the page, and then fill in the actual synapse address: Hit Continue and then enter the username and password you just created. You might see something like this as well🤣🤣🤣 ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:3:0","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"4. Upgrade Upgrading synapse to the latest version is just like upgrading other softwares on ubuntu, Executing apt full-upgrade would do the job. But before doing that, make sure to backup your homeserver.ymal and then press n when asked wheather or not to replace the config file. ","date":"2022-05-24","objectID":"/setting-up-your-own-matrix-synapse-service-on-vps/:4:0","tags":["fediverse","matrix","synapse","ubuntu","vps"],"title":"Setting up your own Matrix Synapse  service on VPS","uri":"/setting-up-your-own-matrix-synapse-service-on-vps/"},{"categories":null,"content":"1 准备工作 ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:1:0","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"1.1 服务器要求 搭建以前，一定要确认自己的vps是否开通了25端口，以及是否可以设置rDNS，否则下面不用看了。我使用的racknerd的VPS，一年只需要10美元左右，符合搭建的要求，推荐大家在这家注册使用。 使用Maddy搭建邮箱服务挺方便，这里记录下，供以后再搭建时使用。 注意\r将文中example.org域名替换成自己的\r","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:1:1","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"1.2 域名设置 先设置二级域名，mx.example.com，A记录和AAAA记录分别指向服务器ipv4地址和ipv6地址。然后设置根域名(@)mx记录，指向mx.example.com ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:1:2","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"2 安装maddy ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:2:0","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"2.1 下载 这里使用Maddy编译好的文件进行。先下载并解压缩（目前是0.5.4版本）: wget https://github.com/foxcpp/maddy/releases/download/v0.5.4/maddy-0.5.4-x86_64-linux-musl.tar.zst apt install zstd tar --use-compress-program=unzstd -xvf maddy-0.5.4-x86_64-linux-musl.tar.zst cd maddy-0.5.4-x86_64-linux-musl mv maddy maddyctl /usr/local/bin/ mkdir /etc/maddy \u0026\u0026 mv maddy.conf /etc/maddy/ mv systemd/*.service /usr/lib/systemd/system/ mv man/*.1 /usr/share/man/man1/ \u0026\u0026 mv man/*.5 /usr/share/man/man5/ 运行tree命令，可以看到maddy目录结构很简单，主要是maddy和maddyctl两个可执行文件和maddy.conf配置文件 ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:2:1","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"2.2 添加程序用户 为Maddy程序添加一个单独的用户并且授予权限: useradd -mrU -s /sbin/nologin -c \"maddy mail server\" maddy chown -R maddy:maddy /usr/local/bin/maddy* /etc/maddy ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:2:2","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"2.3 获取SSL证书 获取证书，需要先停止占用80端口的程序，比如nginx: apt install snapd snap install --classic certbot certbot certonly --standalone --preferred-challenges http -d mx.example.com apt install acl mkdir -p /etc/maddy/certs mkdir -p /etc/maddy/state mkdir -p /etc/maddy/runtime mkdir -p /etc/maddy/log chown maddy:maddy /etc/maddy -R setfacl -R -m u:maddy:rX /etc/maddy/certs/ setfacl -R -m u:maddy:rX /etc/letsencrypt/{live,archive} cd /etc/maddy/certs ln -s /etc/letsencrypt/live/mx.example.com ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:2:3","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"3 配置Maddy nano /etc/maddy/maddy.conf ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:3:0","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"3.1 添加域名 修改以下内容: $(hostname) = mx.example.com $(primary_domain) = example.com $(local_domains) = $(primary_domain) 添加以下内容: state_dir /etc/maddy/state runtime_dir /etc/maddy/runtime log syslog /etc/maddy/log/maddy.log 保存，退出。 ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:3:1","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"3.2 添加邮箱用户 创建用户和对应的密码: maddyctl creds create hi@example.com maddyctl imap-acct create hi@example.com ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:3:2","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"4 启动maddy服务: ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:4:0","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"4.1 启动服务 chown maddy:maddy /etc/maddy -R #这里会再运行一次，不然会报错 service maddy start ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:4:1","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"4.2 客户端配置 这时候就可以使用thunderbird或者需要smtp服务的程序等工具连接邮箱了。 ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:4:2","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"5 更多配置 ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:5:0","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"5.1 防止邮件进入垃圾箱 为了避免邮件进入垃圾邮箱，域名还需要进行配置: 新建 _dmarc 的TXT记录，值为 v=DMARC1; p=quarantine; ruf=mailto:hi@example.com 新建 default._domainkey 的TXT记录，值为 /etc/maddy/state/dkim_key/example.com_default.dns 文件的内容，类似于 v=DKIM1; k=rsa; p=MII...AB 最后要到VPS主机商那里，设置下rDNS记录，指向mx.example.com，这一步很重要，我使用的racknerd的vps，一年才10美元左右，可以发ticket让客服将rdns指向你的mx.example.com，一般5分钟左右就能设置好。 这样一来，邮件不会进垃圾箱了。 ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:5:1","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"5.2 设置开机启动 设置maddy开机启动: systemctl enable maddy 更多命令可以使用 maddyctl command -h 查看，比如执行 maddyctl creds -h 可以看到: ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:5:2","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"5.3 更多设置 maddyctl creds list 列出当前所有用户 maddyctl creds create name@example.com 创建用户 maddyctl creds remove name@example.com 删除用户 myaddyctl creds password name@example.com 修改密码 ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:5:3","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"5.4 版本升级 升级Maddy，将新版本的maddy下载下来，将maddy和maddyctl拷贝到下面目录即可 systemctl stop maddy mv maddy maddyctl /usr/local/bin/ ","date":"2022-05-19","objectID":"/setup-mail-server-on-vps/:5:4","tags":["email","maddy","smtp","vps"],"title":"使用Maddy搭建自己的邮箱服务","uri":"/setup-mail-server-on-vps/"},{"categories":null,"content":"1. 硬件介绍 Plex给人的印象是需要服务器端转码，这给很多人造成了错误的印象，前几天入手了终身Plex Pass，随即折腾起来，发现Plex完全可以像Kodi一样使用客户端解码，降低服务器端的CPU占用率，加上Plex本身漂亮的UI界面和强大的数据刮削能力，Plex在Emby(收费), Jellyfin(全免费), 和Kodi(全免费，太丑，弃)的竞争中，完全不落下风。 我的硬件：一台小的Home Box，配置是i3-7100u(Intel Kaby Lake), 8G内存。一台家用NAS，QNAP NAS 453B mini一台，10G内存, 处理器是J3455(Intel Apollo Lake), 8G内存。 处理器是i3-7100的Home Box安装了Esxi，上面安装了Openwrt和Ubuntu server（ubuntu里又装了Plex服务器端）以及其它系统。也就是所说的软路由中安装Plex服务器。 Ubuntu server和QNAP上都安装了Plex server，这里使用Ubuntu中的Plex server来测试，NAS仅仅作为一个存储设备。 i3-7100U的核显是HD 620, 而QNAP NAS的处理器是J3455，核显是HD 500。两款核显均支持4K分辨率下H.264的转码transcoding（包括解码decoding和编码encoding），而对于, H.265(HEVC)编码，只有HD620的也就是7100u支持转码，J3455仅仅支持解码（支持播放）。具体核显的性能区别可以看这里以及这里。所以不论是自己组件NAS还是购买现成的NAS，CPU是非常关键的，CPU越新，核显越新，才能更大幅度的降低CPU的使用率。 ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:1:0","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"2.开始 ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:2:0","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"2.1 软路由Ubuntu系统挂载NAS硬盘 首先在Ubuntu中挂载NAS中共享的电影文件夹： apt install nfs-common #安装nfs showmount -e 192.168.1.99 #看下nas哪些目录是共享可挂载的。 mkdir /mnt/qnap #在ubuntu中创建文件夹qnap，用来挂在qnap的共享文件夹 mount 192.168.1.99:/电影共享 /mnt/qnap #将nas共享的电影共享目录挂在到linux的qnap目录上。 apt install ffmpeg intel-gpu-tools #安装解码器和查看intel显卡占用率程序 ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:2:1","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"2.2 显卡直通设置 ESXI中先允许核显直通\r修改Ubuntu server的显卡信息，将默认的修改为FALSE\r修改Ubuntu配置，添加PCI设备，然后选择刚才直通的显卡即可\r进入Ubuntu后，运行lspci | grep -i vga，发现核显直通成功\r随后安装Plex的Ubuntu服务器端和手机或者PC的客户端，此处略过…，需要注意的是，媒体文件夹选择刚才挂载的NAS文件夹即可。 ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:2:2","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"3. 开始测试 首先进入Plex服务器后台(我这里的地址http://192.168.1.237:32400/)，点击transcoder，确保下面两个选择框都勾选 ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:3:0","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"3.1 ass字幕 播放H.265的影片，默认使用ass字幕，服务器端资源占用率如下： 运行htop，cpu占用率情况，可以看到plex的transcoder在工作 运行intel_gpu_top，可以看到核显也在工作 Plex后台也可以看到Plex在硬件转码(HW)，字幕显示ASS格式 ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:3:1","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"3.2 更换为srt字幕 我下载的影片内嵌了srt的字幕，在播放终端手动将字幕设为srt字幕后的情况： CPU占用率明显下降，并且plex的transcoder没有工作 核显没有任何负载 Plex后台显示Direct Play，意思就是后台没有进行任何的转码，字幕是SRT ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:3:2","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"4. 总结 所以以我目前的播放终端来看，能更进一步降低CPU占用率的很简单的办法就是更换字幕格式，实际测试发现SRT和**PGS（pgs字幕还带有各种特效和字体，居然不转码？！很奇怪）**以及SSA格式的字幕均不会转码，很不起眼的原因。如果必须服务器端解码的时候，这就考验服务器端CPU的核显了，牙膏厂的7系列及以后的cpu的核显(620及以后的可以)可以承担很多工作，这样CPU使用率会低很多。 音频有时候也会转码，但是cpu的使用率却非常低，所以不考虑了。 下一步研究下免费的Jellyfin，毕竟是免费的，并且是从收费的Emby脱离出来的。 ","date":"2020-04-09","objectID":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/:4:0","tags":["emby","esxi","homelab","htpc","jellyfin","kodi","nas","plex","qnap","ubuntu","软路由"],"title":"降低CPU使用率 让Plex客户端解码","uri":"/%E9%99%8D%E4%BD%8Ecpu%E4%BD%BF%E7%94%A8%E7%8E%87-%E8%AE%A9plex%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E7%A0%81/"},{"categories":null,"content":"QNAP还是不错的，就是界面做的一般般。视频默认油管的，B站地址。 ","date":"2019-11-15","objectID":"/%E4%BD%BF%E7%94%A8qnap-nas%E7%9A%84hbs-3%E5%90%8C%E6%AD%A5onedrive-googledrive%E7%AD%89%E7%BD%91%E7%9B%98%E5%86%85%E5%AE%B9/:0:0","tags":["googledrive","homelab","nas","onedrive","qnap"],"title":"使用qnap nas的hbs 3同步onedrive googledrive等网盘内容","uri":"/%E4%BD%BF%E7%94%A8qnap-nas%E7%9A%84hbs-3%E5%90%8C%E6%AD%A5onedrive-googledrive%E7%AD%89%E7%BD%91%E7%9B%98%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"对于站长，配置域名的https, http/2以及hsts是家常便饭，之前的博客说过，这里使用免费的let’s encrypt来演示，环境是ubuntu18.04 + nginx，域名使用lijie.org，下面的命令替换成自己的域名即可。 ","date":"2019-11-01","objectID":"/how-to-enable-https-http2-hsts/:0:0","tags":["domain","hsts","http-2","https","lets-encrypt","nginx","域名"],"title":"域名如何开启HTTPS,HTTP/2以及HSTS","uri":"/how-to-enable-https-http2-hsts/"},{"categories":null,"content":"开启https sudo add-apt-repository ppa:certbot/certbot #将let's encrypt加入ubuntu软件源,ubuntu 18.04及之前版本，ubuntu20.04方法如下 sudo apt-get update #更新列表 sudo apt-get install python-certbot-nginx #安装certbot,ubuntu 18.04及之前版本，ubuntu20.04方法如下 apt install certbot python3-certbot-nginx #ubuntu20.04开始直接安装就行，不需要另外添加lets encrypt源。 sudo ufw allow 'Nginx Full' #将80, 443端口开启，加入防火墙 sudo certbot --nginx -d lijie.org -d www.lijie.org #使用certbot给两个域名申请ssl 执行上述命令会提示： Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. -———————————————————————————– 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you’re confident your site works on HTTPS. You can undo this change by editing your web server’s configuration. -———————————————————————————– Select the appropriate number [1-2] then [enter] (press ‘c’ to cancel): 这里选择2，按回车，剩下的问题按y，同意即可。 https就配置完成了，访问https://www.ssllabs.com/ssltest/，评分会的A，下面我们继续配置，让其得分到A+。 ","date":"2019-11-01","objectID":"/how-to-enable-https-http2-hsts/:1:0","tags":["domain","hsts","http-2","https","lets-encrypt","nginx","域名"],"title":"域名如何开启HTTPS,HTTP/2以及HSTS","uri":"/how-to-enable-https-http2-hsts/"},{"categories":null,"content":"添加HTTP/2支持 sudo nano /etc/nginx/sites-available/lijie.org #编辑网站的nginx配置文件 找到并添加 listen [::]:443 ssl http2 ipv6only=on; #新添加http2 listen 443 ssl http2; #新添加http2 按Ctrl + O保存，然后按Ctrl + X退出后，检查nginx配置文件是否正确 sudo nginx -t #检查配置文件是否正确，一般没问题 sudo service nginx reload #重新加载nginx配置文件，使得修改生效 这样http/2配置基本完成，下面来提高http2的安全性。 依旧打开网站配置文件： sudo nano /etc/nginx/sites-available/lijie.org 找到let’s encrypt替我们生成的下面的语句，前面添加#号将其注释掉： # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot 另起一行，加入： ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; sudo nginx -t sudo service nginx reload #没问题后，重新加载nginx 验证下http2是否生效，命令行输入： curl -I -L https://lijie.org 从返回结果可以看到，http/2生效了。 ","date":"2019-11-01","objectID":"/how-to-enable-https-http2-hsts/:2:0","tags":["domain","hsts","http-2","https","lets-encrypt","nginx","域名"],"title":"域名如何开启HTTPS,HTTP/2以及HSTS","uri":"/how-to-enable-https-http2-hsts/"},{"categories":null,"content":"添加HSTS支持 目前我们使用的https使用的是301转向，即用户先访问http://lijie.org，nginx收到请求后，将80端口的http请求通过301转向到443端口的https。为了避免301转向期间存在的有可能的安全漏洞，我们需要添加hsts功能，强制让浏览器直接访问443端口，而避免访问80端口的http。 编辑nginx配置文件： sudo nano /etc/nginx/nginx.conf #打开nginx配置文件 在配置文件中找到并添加一行： include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains; preload\" always; #在配置文件中新增这一行 这样hsts就配置完毕了，但是用户第一次访问的时候还要301转向，否则看不到hsts的头部包信息，但是随后就不用了。为了避免这个问题，谷歌的chrome浏览器维持了一个开启hsts的网站列表，https://hstspreload.org，可以将自己的网站提交上去，其它的像是firefox，edge等浏览器也会参考此列表。由于本网站套用了CF，无法hstspreload的检测。 开始hsts后，再次访问https://www.ssllabs.com/ssltest/，网站域名的https评分会从A变为A+。 ","date":"2019-11-01","objectID":"/how-to-enable-https-http2-hsts/:3:0","tags":["domain","hsts","http-2","https","lets-encrypt","nginx","域名"],"title":"域名如何开启HTTPS,HTTP/2以及HSTS","uri":"/how-to-enable-https-http2-hsts/"},{"categories":null,"content":"家里有个ESXI虚拟化平台的确是方便，除了可以使用软路由，很多系统都可以安装进去，这里简单说下如何在ESXI中安装Home Assistant，网上大部分教程都是在Linux中的docker里跑HA。 视频演示过程：youtube, B站 首先到官网下载HA的虚拟机文件 下载vmdk文件 将解压缩出来的文件上传到esxi，打开esxi的SSH权限，进入后台，使用下面的命令将vmdk文件转换为esxi可以使用的文件。 vmkfstools -i hassxxx.vmdk 1.vmdk 随后创建虚拟机 新建虚拟机 按照框框里的选择好 然后下一步，下一步。建立好虚拟机后，开始调整虚拟机配置。调整配置很重要。 删除CD/DVD驱动器，然后添加硬盘，添加现有硬盘，选择上面转换好的1.vmdk文件。删除默认分配的硬盘。 点击硬盘左侧的三角，控制器位置选择IDE控制器0，右侧选择主要。 虚拟机选项下面的引导选项，选择EFI。 记得调整cpu和内存数量。 完成上述的配置调整后，就可以给虚拟机通电了，随后访问hassio.local:8123就能打开HA的首页了。 如果访问hassio.local:8123无法打开这个页面，等待5-10分钟再访问 在首页等待一会儿之后，就会自动跳转到管理员设置页面 以上就是安装的粗略过程。 ","date":"2019-10-12","objectID":"/install-homeassistant-on-esxi/:0:0","tags":["esxi","ha","homeassistant","homelab","iot"],"title":"如何在ESXI中安装Home Assistant","uri":"/install-homeassistant-on-esxi/"},{"categories":null,"content":"使用免费版本的cloudflare在大陆都被称为cdn减速，但是从我实际使用来说，减速效果不明显，但是却可以大大提升全球的访问速度。设置合理可以严重降低服务器的负担，对于服务器配置不好，vps本身直连国内速度本身就很慢，以及vps ip被封的人来说，是个神器。 这里，就如何设置wordpress来说下cloudflare的基础设置。先放个效果图，可以看到绝大多数网站请求都使用了cloudflare的cache。 深色是使用的cache，浅色是从我的服务器处理的请求 首先，注册cloudflare，然后修改你域名的两个dns为cloudflare提供给你的。一般十分钟搞定。 打开cloudflare管理界面，可以看到上面有不少可设置选项，在上面先找到page rules。 找到Page rules 免费版本可以使用三条规则，对于wordpress，我感觉两条就足够了。 第一条告诉cloudflare不缓存wordpress的管理员界面，并且应用上了几条cloudflare的安全检查，可以阻止一些有危险行为的访问。 如果你不是wordpress程序，可以替换成你使用的程序的管理uri。 第二条，开启除第一条以外所有内容的缓存，缓存时间7天，这样可以极大减轻服务器的负担。尤其是图片，js，css文件等，效果很明显。假如你对某篇文章进行了编辑，可以找到Caching，点击下面的Custom Purge，输入要强制更新的页面地址，这样cloudflare会获取最新修改后的页面，然后在你自己浏览器此页面的URL后面添加个?号，让浏览器也强制刷新缓存。最后记得把首页缓存也purge一下。但是很多清况下，即使你purge了页面，清除了浏览器缓存，但是页面依然没更新，这一点比较恼人。 注意，Rules是有顺序关系的，不能搞乱。Page rules设置就此完毕。 其余的cloudflare的设置，这里提一下 可以将SSL/TLS中Edge Certificates下面的Always Use HTTPS打开。并且将HSTS打开。Automatic HTTPS Rewrites打开。 将Speed中Optimization下面的Auto Minify右侧的Javascript, CSS, HTML全部勾选，并且打开下面的Brotli和Rocket Loader。 将Caching下面的Always Online打开，这样你的服务器短期出现故障，比如重启之类的活动时候，网站访问几乎不受影响。 关于网站使用cloudflare是基本设置就是这样了，其余的要么收费，要么我也看不懂。后续可能会研究下Firewall及Workers的详细用法。网上关于网站测速评分工具看看就好，毕竟这个和你网站使用的图片，模板，插件有很大关系。 ","date":"2019-10-05","objectID":"/%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8cloudflare%E5%85%A8%E7%90%83%E5%8A%A0%E9%80%9F/:0:0","tags":["cloudflare","vps","wordpress"],"title":"让你的网站使用cloudflare全球加速","uri":"/%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8cloudflare%E5%85%A8%E7%90%83%E5%8A%A0%E9%80%9F/"},{"categories":null,"content":"目前使用的esxi版本是差不多一年前的版本，前段时间esxi出了6.7 Update3，关于u3版本的新特征，可以看这里，貌似CPU利用率有提升？所以打算升级下，网上搜索了下文章，很容易。现在将升级过程罗列如下： VMware官方文档指出，想升级到esxi 6.7 u3，目前你使用的esxi最低版本必须是6.0，低于此版本的必须先升级到6.0，然后再升级到6.7 u3。 you can only upgrade esxi to 6.7 u3 if the esxi you’re running is 6.0 or above. Anything older than 6.0, you’ll need to upgrade to 6.0 first, and then do a second upgrade to 6.7 u3. 打开https://my.vmware.com，登陆，下载最新版本的esxi。 Before you start, take a look at esxi 6.7 update 3 new fetures. Navigate to https://my.vmware.com, log in with your account, and download the latest version of esxi. 选择上面的红框标注的位置 chose and click the marked link 选择esxi 然后点击下面的search, choose esxi and then search 找到最新版本 下载 find and download the latest version 将下载的安装包上传到esxi后台 upload the esxi package to esxi storage 打开esxi的SSH权限 enable the esxi ssh 使用ssh工具登陆esxi后台 找到升级包存放的位置 connect esxi through SSH and locate the package you just uploaded 将esxi设为维护模式 之前需要关闭所有的虚拟机电源 put the esxi into maintenance mode, poweroff all your VMs before you do that 运行的命令为：esxcli software vib update -d “升级包的路径及文件名”， 可以按tab键补齐 我这里的命令是： esxcli software vib update -d \"/vmfs/volumes/1T/tmp/update-from-esxi6.7-6.7_update03.zip\" issue the command above, change the path of your esxi package accordingly 运行命令 几分钟后会有结果提示升级成功 然后reboot机器 2 or 3 minutes later, the update should completed successfully, then reboot. 重启完成后，退出维护模式，可以看到esxi版本号已经是最新的了 after the reboot completed, log into esxi, quit the maintenance mode, and you’ll noticed the version number has changed to the newest. 以上。改天再升级下vcenter，以及如何从vcenter升级esxi。 ","date":"2019-10-03","objectID":"/%E5%8D%87%E7%BA%A7esxi%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84u3%E7%89%88%E6%9C%AC/:0:0","tags":["esxi","homelab","vmware","软路由"],"title":"升级ESXI到最新的6.7 U3版本","uri":"/%E5%8D%87%E7%BA%A7esxi%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84u3%E7%89%88%E6%9C%AC/"},{"categories":null,"content":"About LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt\r","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Plausible Analytics supported  Yandex Metrica supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout  Desktop/Mobile responsive layout  Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 68 social links supported  Up to 24 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  utterances comment system supported by utterances  giscus comment system supported by giscus Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightGallery  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $\\KaTeX$  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent  Person shortcode … ","date":"2019-08-02","objectID":"/about/:0:1","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. ","date":"2019-08-02","objectID":"/about/:0:2","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Special Thanks Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:0:3","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"使用罗技的鼠标宏实现在暗黑3中一键切换巅峰的功能，注释很详细了。实例始用野蛮人，一般来说组队死灵法师需要这样的功能。 需要注意的是，下面最终代码里面的鼠标坐标仅仅适用于我的显示器，至于大家的显示器在游戏中的按钮的坐标，大家可以在将鼠标移动到按钮上后，执行下面代码，看罗技鼠标console输出的数值就是你的坐标了。同时显示的还有你当前按键的编号(实例输出结果arg = 2，也就是你目前按的键在代码里对应的是2这个数字)，也很关键。确定坐标和你想使用的快捷键的在程序宏中对应的编码很关键！ function OnEvent(event, arg) x,y = GetMousePosition(); // 获取到当前鼠标位置，并且输出到脚本console界面，为下面获得每个按钮的坐标提供很大的帮助. OutputLogMessage(\"event = %s, arg = %s\\n\", event, arg); // 输出当前按了哪个按键，同样非常关键. OutputLogMessage(\"z = %d, %d\\n\", x, y); // 输出当前鼠标坐标到console. end 执行上面的代码，可以看到目前按键信息以及坐标信息，如下图： 正式代码如下： // 本脚本以野蛮人作为测试，始用罗技G610键盘为例(鼠标同理)说明。实现按键盘的F5键将力量加满，体能为0； // 按F6键将体能加满，力量为0.(此功能未实现，大家可以自己试试看) function OnEvent(event, arg) // 此if语句判断是否按了F5，是的话加满力量,体能设为0. if(event == \"G_PRESSED\" and arg == 5) then // 这里的5就是键盘上的f5，如果是鼠标，并且不清楚按键arg参数具体是多少， // 可以将此处的if语句去除，看罗技console界面输出的结果. x,y = GetMousePosition(); // 获取到当前鼠标位置，并且输出到脚本console界面， // 为下面获得每个按钮的坐标提供很大的帮助. OutputLogMessage(\"event = %s, arg = %s\\n\", event, arg); // 输出当前按了哪个按键，同样非常关键. OutputLogMessage(\"z = %d, %d\\n\", x, y); // 输出当前鼠标坐标到console. PressKey(\"p\"); // 按P键，打开巅峰点面板. ReleaseKey(\"p\"); Sleep(5); MoveMouseTo(33160,44399); // 将鼠标移动到重置按钮处.这些坐标适用于我的显示器，你的显示器具体坐标还需要看上面的输出. PressAndReleaseMouseButton(1); // 点击重置按钮，重置所有巅峰点. // 以下加移速. 装备上的移速来决定巅峰加多少移速点，我这里加了28点，也就是巅峰加了14%的移速. Sleep(5); MoveMouseTo(43815,31826);// 将鼠标移动到加移速的按钮处. for i = 0, 27, 1 do Sleep(2); PressAndReleaseMouseButton(1); end // 以上加移速 // 以下加满怒气 MoveMouseTo(43576,36746); // 将鼠标移动到加怒气的按钮处. PressKey(\"lCtrl\"); // 按左ctrl键 PressAndReleaseMouseButton(1); // 按左ctrl的时候，按一下左键即可加满怒气. Sleep(2); ReleaseKey(\"lCtrl\"); // 以上加满怒气 // 以下加满力量 MoveMouseTo(43679,20468); // 移动到力量按钮处. PressKey(\"lCtrl\"); for i = 0, 40, 1 do // 按住ctrl键的清况下点击力量按钮40下，相当于4000力量. Sleep(2); PressAndReleaseMouseButton(1); end ReleaseKey(\"lCtrl\"); // 以上加满力量 // 设置完毕后，按接受按钮. MoveMouseTo(28652,49440); PressAndReleaseMouseButton(1); end end 以上。 ","date":"2018-06-23","objectID":"/%E6%9A%97%E9%BB%91%E7%A0%B4%E5%9D%8F%E7%A5%9E3-%E4%B8%80%E9%94%AE%E5%88%87%E6%8D%A2%E5%B7%85%E5%B3%B0/:0:0","tags":["一键切换巅峰","暗黑3","罗技","鼠标宏"],"title":"暗黑破坏神3 一键切换巅峰鼠标宏代码详解","uri":"/%E6%9A%97%E9%BB%91%E7%A0%B4%E5%9D%8F%E7%A5%9E3-%E4%B8%80%E9%94%AE%E5%88%87%E6%8D%A2%E5%B7%85%E5%B3%B0/"},{"categories":null,"content":"购买vultr的VPS差不多一年，用下来还算稳定，开始的大部分时间用来架设SS使用，最近趁着8折，把配置升到了1G内存版本的，放了三个wp在上面，很无奈的是由于MYSQL 5.7.12的bug，vps开机40分钟内存就满了，网上找了一堆优化的文章，设置下来还是不管用，谁知升级到MYSQL 5.7.13后问题自己解决，现在内存使用量稳定在不到300M，很舒坦。 此贴主要记录折腾了几次的VPS的设置，主要参考的digitalocean上的文章，这一点上vultr比DO差太多了。关于支付问题，使用的是中信银行的VISA卡，网上就可以申请，很方便。 这一步是VPS申请到后的第一步，很简单，可以参考DO的这篇文章，前面的关于登陆的一概略过，我还是喜欢还是使用密码登陆（关键使用WIN10系统），后面的关于ufw的配置需要看下，也很简单。 第二步就是安装NGINX, MYSQL, PHP了。 第三步，既然有了Let’s Encrypt这个免费的HTTPS福利，用起来吧。 添加对HTTP/2的支持，其实在nginx的网站配置文件中SSL部分添加http2即可，可以使用Chrome插件HTTP/2 and SPDY indicator来检查是否生效，但前提需要翻墙访问你的网站，或者访问这个网站来检测，貌似也需要翻墙，实在不行，在VPS命令行执行 openssl s_client -connect www.yourdomain.com:443 -nextprotoneg ‘’来检测。 这一步就是解决如何让nginx支持多个网站了，可以直接复制第一个网站的nginx配置文件，将配置文件有关ssl，server_name及root的配置修改一下，链接到sites-enabled里面，然后重新获取let’s encrypt证书即可。注意，新网站的nginx配置文件中listen后的default_server要去掉，有两处。 这一步开始安装wordpress了，还有一些安全配置，具体可以参考这篇文章，值得细看。 愿意安装phpmyadmin的可以看这里，文中nginx比较老，将phpmyadmin的目录链接到某网站root下就可以了，比如 ln -s /usr/share/phpmyadmin /var/www/html 关于MYSQL的一些优化可以使用这个脚本，里面会提一些建议，这个网站专门讲解了MYSQL的优化。其中一篇帖子讲解了影响MYSQL性能的几个重要参数。使用命令mysqladmin -u root -p variables » log可以查看你VPS上MYSQL的参数配置情况。 网上还有一个MYSQL的内存占用计算器，貌似不准。但可以看出影响MYSQL性能的参数有哪些。 目前就是这些了，关键是MYSQL最新版本不耗内存，还是使用了MYSQL。 ","date":"2016-06-27","objectID":"/vultr-vps%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/:0:0","tags":["vps","vultr"],"title":"VULTR VPS配置笔记","uri":"/vultr-vps%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"},{"categories":null,"content":"注：本文尚未写完暂时写完，不免会有一些逻辑性错误。会在后面不断修正。文章不限于闪光灯，还有由高速闪光同步所引出的其它一些内容，比如变形问题，录像时所产生的的其余问题等。 ","date":"2014-06-12","objectID":"/speedlig/:0:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"1. 闪光灯记录 快门速度和光圈大小影响环境光(ambient light)亮度，而影响被拍摄主题的亮度的只有光圈值；因为闪光灯闪光时间（Flash duration）很短暂，如果快门速度慢了，会增加环境光的进光量，不会增加闪光灯的进光总量，所以被摄物体亮度不变，而当光圈变大时，会增加闪光灯的进光总量，被摄物体也会变亮，相应的环境亮度也会提高，所以为了维持环境光不变的情况下，需要增加快门速度（增加快门速度不会改变被摄物体亮度）。 被摄物亮度不变，增加环境光亮度：降低快门速度 被摄物亮度不变，降低环境光亮度：提高快门速度 环境光亮度不变，增加被摄物亮度：增大光圈，同时提高相应档次的快门速度 环境光亮度不变，降低被摄物亮度：缩小光圈，同时降低相应档次的快门速度 ","date":"2014-06-12","objectID":"/speedlig/:1:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"2. 调整被摄物亮度的几种方法 手动直接调节闪光灯的功率 调节相机光圈 调整闪光灯和物体的距离（球的表面积计算公式: 球的表面积=4πr^2）。 ","date":"2014-06-12","objectID":"/speedlig/:2:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"3. ISO 增大ISO，可以在降低闪光灯功率的情况下得到相同的亮度，从而可以延长电池使用时间。 ","date":"2014-06-12","objectID":"/speedlig/:3:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"4. TTL = Through The Lens ","date":"2014-06-12","objectID":"/speedlig/:4:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"5. 高速闪光和后帘同步无法同时使用。 ","date":"2014-06-12","objectID":"/speedlig/:5:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"6. 光线影响 光线不好的环境下，相机快门速度即使很慢，当环境光对被摄物体不产生影响时，你实际的快门速度是闪光灯的flash duration。可以参看视频。当环境光影响最后成像效果时，可以根据拍摄要求缩小光圈或者降低ISO值，然后试拍一张，如果拍的是全黑的，说明环境光已经不影响成像了，这时的快门速度就是闪光灯的闪光速度了，视频说明。 ","date":"2014-06-12","objectID":"/speedlig/:6:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"7. 每档光圈值 F1， F1.4， F2， F2.8， F4， F5.6， F8， F11， F16， F22， F32， F44， F64 ","date":"2014-06-12","objectID":"/speedlig/:7:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"8. Flash duration 佳能580EX的flash duration（网上找的非官方有争议的t.5数据）： 1/1 power = 1/1000 second 1/2 power = 1/2000 second 1/4 power = 1/4000 second 1/8 power = 1/9000 second 1/16 power = 1/15000 second 1/32 power = 1/21000 second 1/64 power = 1/30000 second 1/128 power = 1/35000 second ","date":"2014-06-12","objectID":"/speedlig/:8:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"9. EOS闪灯说明书。 ","date":"2014-06-12","objectID":"/speedlig/:9:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"10. HSS HSS时，因为快门不是完全打开，所以相机无法全部接收闪光灯所发出的光，所以在HSS时，GN值会随着快门速度变快而变小，所以HSS时要离拍摄物体更近一些；另外相机画幅大小对闪光灯GN指数也有影响。 ","date":"2014-06-12","objectID":"/speedlig/:10:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"11. HSS闪烁频率 至于在HSS时，闪光灯的闪烁频率，目前在网上还没找到，但是观看这段高速摄影机拍摄的视频可以发现，频闪时，闪烁频率是非常高的（视频作者称，这是放慢2万倍后的效果），至于可能产生的物体变形问题，在下面第13条具体讨论。 ","date":"2014-06-12","objectID":"/speedlig/:11:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"12. HSS功耗 HSS时会消耗更多的电量，会降低灯的GN值，但是普威的闪灯收发器却可以根据不同的快门速度来匹配相应的闪灯的闪烁频率，减少快门打开前闪灯的闪光时间，从而可以延长电池使用时间，提高回电速度，并且可以提高2档的闪光强度，相当于提高了GN值，具体如何做到的，可以看文章，不是能完全看懂那几张图。HyperSync。 ","date":"2014-06-12","objectID":"/speedlig/:12:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"13. 果冻效应 高于X快门时的运动物体会变形（类似于摄像出现的果冻效果，Rolling shutter，视频演示），可以看这篇文章，配图很知名，图片中背景中的人物向左倾斜，而赛车车轮向右倾斜。尝试解释一下，首先，当时相机快门的帘幕相对图片而言从下部往上部移动（因为最终相片在胶片或感光元件上是上下，左右均颠倒，所以实际快门帘幕相对相机而言，是从相机的上部往下部移动，为了便于理解，下面我们帘幕移动方向全部相对照片而言，即从下向上），首先，地面先曝光，然后两个帘幕之间的缝隙继续向上移动（相对照片来说），这时，先曝光车轮底部，由于当时相机向右移动的速度跟不上赛车向右的速度，当幕帘缝隙继续向上移动之后，赛车已经向右走了一小段距离，所以车轮渐渐向右倾斜，幕帘继续往上移动，开始曝光后面静止的观众，先曝光脚步，因为相机还在继续向右移动（相对相机而言，背景人物向左移动），所以当幕帘缝隙曝光到背景人物上部时，人物是向左倾斜的。那么这里又出现了问题，照片中物体的变形拉伸是和什么因素有关呢？快门速度还是相机向右移动的速度？答案应该是都有关系（以下所有假设作者试图对准赛车，而人物失焦），首先，出现这种变形的根本原因是当时拍摄的快门速度已经高于快门最高同步速度，即X。 如果这时快门速度不变（高于X快门），但是相机不向右移动： 那么人物不变形，赛车会因为失焦而变虚，同时也会变形。 如果赛车没失焦，那么赛车是清晰的，但变形。 而如果相机快门在X以下，相机向右移动： 如果拍摄时焦点准确落到了赛车上，背景人物和赛车不变形，是直的，但是赛车会有拖影（和失焦变虚不是一回事）。 如果对焦点没有对准赛车，这时赛车既因为失焦而变虚，又会因为快门速度慢而有拖影，但不变形。 如果相机快门在X以下，相机不动： 如果赛车失焦，会有虚影，同时也会因为快门慢而有拖影（比相机向右移动时赛车的拖影更严重，但是人物拖影会减轻），一切景物不变形。 如果赛车对准焦，那么赛车是清晰的，但会有拖影。 ","date":"2014-06-12","objectID":"/speedlig/:13:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"14. 实拍 自己拍了几张风扇的图片，当快门速度高于X快门时，可以看到左下角的叶片被拉长变形了： 上图，静止状态拍摄快门1/250s，此时快门会完全打开 上图，风扇顺时针转动时拍摄，此时快门以缝隙的形式向上移动，左下角叶片被拉伸产生变形，右侧的被缩小，可以自己推断下 ","date":"2014-06-12","objectID":"/speedlig/:14:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"15. 一本不错的关于闪光灯的电子书。 ","date":"2014-06-12","objectID":"/speedlig/:15:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"16. 讨论 为什么摄像时果冻效应出现的频率要比摄影的时候高许多？这里有几篇帖子讨论，1，2，3。但好像也没什么好的解释。在网上找了许久，找到了一种答案，拍摄录像时所谓的rolling shutter或者global shutter并不是真正的物理快门（帘幕），而是电子快门（即通过电子元件控制感光元件采样时间长短）。DSLR拍摄录像时，真正的物理幕帘其实是一直打开的（所以单反录像时，帧数不是传统意义的快门数，并不影响快门寿命），这时候如果是CCD感光元件，那么整个CCD会同时对光线进行采集然后将数据整体读取出去，即所谓的global shutter，不存在生物体变形问题；而当使用CMOS时，尽管CMOS也是整个暴露在外面，但是rolling shutter却控制CMOS逐行采集光线，然后逐行读取，再加上CMOS电荷清零的速度并不快，需要几十分之一秒，如果相机或者被拍物体移动较快，这样就非常容易导致物体变形的问题。而DSLR拍摄照片时，是由实际的幕帘（Curtain）来控制CCD或者CMOS曝光的，而幕帘的快门间隙现在最快可以做到1/8000s的效果，远高于电子快门电荷清零的时间，所以单反拍片时变形问题不容易出现。柯达一篇文章可以看看。 ","date":"2014-06-12","objectID":"/speedlig/:16:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"17. 变形方向 DSLR拍摄录像时和拍照时的物体变形有时会出现不同方向的变形，也就是说，录像时，相机向左摇动时，如果rolling shutter控制从感光元件底部开始向上逐行采样（相当于拍照时，快门幕帘从下向上运动），生成的录像中，因为小孔成像相反原理，先从被摄物体上部开始采样，不动的物体最终变形为成“\\”形状，而拍照片时，幕帘缝隙是从上到下划过感光元件，不动的物体变形会是“/”形状。 ","date":"2014-06-12","objectID":"/speedlig/:17:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"18. 视频影响 拍摄视频时，帧速也影响果冻效果。帧速越高，采样频率越高，变形越小。（电子）快门速度越快，变形越大。快门太慢有拖影，太快图像会蹦蹦跳跳的。 ","date":"2014-06-12","objectID":"/speedlig/:18:0","tags":["photography","speedlight","摄影","闪光灯"],"title":"闪光灯学习","uri":"/speedlig/"},{"categories":null,"content":"最近使用excel比较多，记录操作两个，都比较笨。 如下数据： 一、统计下有几个学生值日，并且统计值日次数。 复制学生姓名到任意一列，比如D列，选中D列的学生姓名，点击“数据”-》“删除重复项”，可以得到没有重复的数据，然后点击E2单元格，上面输入公式=COUNTIFS(B:B,D2)，意思是比较B列和从D2开始的数据。接着拖动E2往下，即可得到如下结果： 二、统计下哪些新同学在11号以后值日，即11号以前没有值过日。 剪切（注意是剪切）b6到b13的数据到新的一列，比如D列，删除重复数据后，在E2输入公式：=COUNTIFS(B:B,D2)，往下拖动，其中显示数字为0的就是想要的结果，即11号之前没有值日的同学。 三、比较两列数据中是否有相同项目 空白列输入=MATCH(A1,B:B,)，意思是从A1单元格开始，A列每个单元格都和B列的数据进行比对，并显示区B列和A列相同数据的坐标。 ","date":"2014-03-14","objectID":"/exce/:0:0","tags":["excel"],"title":"Excel小技巧","uri":"/exce/"},{"categories":null,"content":"wr841n v7被我刷成了砖，当时想从openwrt刷回官方固件，按照网上的命令执行下来就出问题了，重启路由后，所有灯一起闪烁，连接电脑后显示网线没插。 淘宝买了了ttl转usb工具，按照这位兄弟的帖子一步步来，就可以把wr841n救回来了。 说说自己在这过程中碰到的几个问题吧： 1. 杜邦线接线顺序，我是wr841n V7，顺序可以参考下图，找高人给焊接了金属棍，这样可以直接使用杜邦线了。 2. 第11步短接了C496后，SecureCRT依然是白屏，没有字符显示，后来重新检查了焊接点和C496好几次，最后发现原因是路由器没插电源 0_O 3. 一定要把电脑的防火墙给关了。否则第18步会报错。 4. 要上传的固件一定要选对，从tplink官网下载的wr841n V7的固件居然不行，网上找了个，需要的可以下载。 ","date":"2013-08-28","objectID":"/ttltp-link-wr841n-v7/:0:0","tags":["tp-link","路由器"],"title":"使用ttl线复活刷成砖的tp-link wr841n v7无线路由器","uri":"/ttltp-link-wr841n-v7/"},{"categories":null,"content":"在刨去因为组装等问题人为因素的影响下，跑焦的客观原因如下： 1。 镜头里球面镜片引起的多重焦点会让相机自动对焦模块变傻，不知道到底哪个是真正的焦点。 2。 和被拍摄的物体也有关系，被拍摄物体明暗差别密集度有关系。这一点是相位差对焦没法解决的。也就是说有两个焦点，一个是锐度的焦点，一个是分辨率的焦点。这一点在尼康工作人员那里也得到了证实。 以上2点所引起的跑焦分析可以看帖子。 3。 对焦准确度问题，F2.8准确度的af sensor比其余的对焦sensor对焦准确度更高一些。 4。色温居然也影响对焦。 5。 环境光线影响对焦精度。这个好理解，极端条件就是，没对比度的地方，等着镜头拉风箱吧。 6。 机身固件问题。数码单反机身内一般都包括自己镜头的一些数据，但是对于老相机，固件不再升级，从而也就不会包含新镜头的数据，导致新镜头在旧机身上容易跑焦。 其他影响因素还可以一直列下去，但是没信心了。 看了这么多不可抗拒力，如果你镜头稍微跑焦，那你死心吧，彻底死心吧。因为跑焦是正常的，完全无误合焦才是诡异事件 ","date":"2012-12-03","objectID":"/blog-pos/:0:0","tags":["photography","摄影","跑焦"],"title":"影响跑焦的因素","uri":"/blog-pos/"},{"categories":null,"content":"注：本文在严格意义上来说并不严谨，仅仅是为了摄影爱好者对一些常见词能有个直观的了解而写。 EV，全称是（Exposure Value，即曝光值），Wikipedia上有解释（中文）。 笼统来说，EV就是用来衡量我们生活环境周围亮度的一个单位。 根据wikipedia上的定义，0EV就是光圈在f/1.0，ISO在100的情况下，曝光时长1s的时候的亮度。凭借平时我们拍照的经验可以知道，这个0EV是相当暗的环境了。 下表是wikipedia上列出的一些EV值表： 宾得新出的旗舰机型K-5II/K-5IIs对焦系统可以工作的环境是-3EV，查上面的表可以知道，是光圈在F/1.0，ISO100，曝光8秒的暗部环境下，相当厉害。 这里再介绍个能够通过照片EXIF信息提取出EV信息的软件：PhotoME 软件也有繁体中文版，翻译不完整，但是能看个大概。打开软件后可以看到里面非常多的内容，原来照片的EXIF信息包含这么多东西在里面。 随便打开一张照片，在右侧一堆堆的信息中可以找到AE Metering Segments，这里列出了我拍的一张照片的16个区域的EV值，如下图所示： 还有更直观的方式，点击 图形 两个字： 软件还可以显示拍照时的对焦点，相机的快门次数（对于宾得是实实在在的快门数），拍照时电池电量信息，拍照时相机机身温度，。这个软件很值得研究一下，里面的内容实在太多了。 ","date":"2012-11-16","objectID":"/ev/:0:0","tags":["photography","photome","摄影"],"title":"什么是EV","uri":"/ev/"},{"categories":null,"content":"记下几个点，一边以后翻阅，没有先后的逻辑性，仅仅是一些零碎的知识点，极有可能是错的： 1. accuracy：google翻译成准确性；precision：google翻译成精确性。这两者还是有点区别的，准确性高不一定精确性就高，反过来也成立。比如：测量n次某数据，最后得到取平均值如果和实际完全正确的话，叫做这个值准确，但是如果每次测量的数据值偏差都很大的话，那么每次测量的精确性就很低；如果每次测量的数值偏差都很小，那么精确度很高，但是取得的平均值和实际值偏差大的话，那么准确性小。但是也存在精确度差，准确度也差，或者准确度差，精确度也差；精确度高，准确度也高，准确度高，精确度也高。 2. 先说对焦系统的准确性，对于F2.8的对焦模块（autofocus sensor，一块小的CCD）要求准确性很高，也就是尽量对焦点偏移量不超过焦深（Depth of Focus）的1/3（说法不一，有的资料1/2也行），这里注意焦深和景深(Depth of Field)的区别。景深是镜头前面实物清晰的距离，而焦深是实物在成像面清晰的距离。下图说明： 3. F2.8的对焦准确性很高，但是佳能将af sensor像素密度增加一倍（这样对光线更加敏感）的情况下可以使得F4的对焦准确性和F2.8相同。大部分资料上都显示基线（baseline）影响对焦速度，按照这条理论，F2.8的af sensor对焦速度要比F4的慢，但是准确度要比F4高，可是佳能的做法（佳能已取得相关专利）使得F4不仅比F2.8对焦快，并却准确度能和F2.8一样高。 4. 市面上F5.6是对焦准确度下下线，所以一些自动镜头的最大光圈要保证在F5.6，要不没法自动对焦了，只能手动对焦。所以宾得新生产的白大炮560mm F5.6加上倍增镜的话，只能手动对焦。 ","date":"2012-10-26","objectID":"/blog-pos-2/:0:0","tags":["dslr","photography","单反","摄影"],"title":"单反对焦学习","uri":"/blog-pos-2/"},{"categories":null,"content":"黑苹果除了safari比较稳定之外，Chrome和Firefox都不稳定。所以搜索了下如何在Safari下配合goagent一起使用。步骤如下： 1. 在Chrome的SwitchySharp插件的选项中将pac文件导出。 2. 到download目录下将导出的SwitchyPac.pac复制到~/Library/Internet Plug-Ins目录中。中文路径就是mac系统盘下的资源库。 3. 在Safari偏好设置当中，选择高级-代理。如下图所示，选择第二项自动代理配置，在右侧选择刚才的pac文件。 4. 在第三项web代理(HTTP)，右侧填写goagent地址，默认是127.0.0.1:8087。 如何查看隐藏文件夹？ 在终端执行 defaults write com.apple.Finder AppleShowAllFiles YES，然后再执行 Killall Finder。就可以在finder中看到隐藏文件及文件夹了。 ","date":"2012-07-09","objectID":"/safari-goagen/:0:0","tags":["goagent","macos","safari"],"title":"Safari下使用goagent","uri":"/safari-goagen/"},{"categories":null,"content":"是自己的理解，有任何不对的地方，欢迎交流。 首先先确定影响景深(DOF: Depth Of Field)的因素，根据wikipeida上的景深计算公式(此公式在拍摄距离大于镜头焦距的情况下成立，下面的讨论都是在这种情况下)可以知道： 其中： N是拍摄时镜头的光圈值 c是相机弥散圆直径，而弥散圆与相机的画幅有关系 f是镜头焦距，这里的焦距分为两种情况，后面会分别介绍 s是拍摄距离 可以看到，影响景深的因素有： 光圈大小 画幅大小 镜头焦距 拍摄距离 情况一、当两个一模一样的50mm镜头，在相同的3m距离下，使用相同的f/2.8光圈拍摄时，全画幅和aps-c画幅的景深区别如下(根据上面的公式，写了个景深计算器，本文中所有的景深数值全部来自此计算器)： 全画幅景深： aps-c画幅： 结论：情况一下，aps-c画幅要比全画幅景深浅，但可以想象的是，全画幅拍出来的照片视野要广。 情况二、当视野相同的时候，这时镜头焦距就不一样了，假设全画幅(感光元件长度为36mm)上使用75mm的镜头，那么aps-c(感光元件水平长度为24mm)上就要使用50mm的镜头了。光圈还是f/2.8，拍摄距离还是3米: 全画幅景深： aps-c画幅景深： 结论：情况二下，如果拍摄视野相同的照片，那么全副的景深要比aps-c的浅。 两种情况下得出的结论是不一样的。 附加一段视频说明，视频来自youtube，传到了国内的youku上： 视频中摄影师通过实际拍摄将上面的两种情况都进行了说明，不同的是第一种情况下，视频中的图片看不出来aps-c比全画幅景深浅，而第二种情况则可以体现出来。 第一种情况，场景的缘故，看不出来aps-c景深更浅，点击可以看大图： 第二种情况，可以明显看到全画幅景深浅，点击可以看大图： 需要说明的是，视频中是按照1.6倍的关系说明的，而本文是按照1.5倍说明的，能看出差别即可。 在视频结束部分，主持人说一般体育摄影者如果使用aps-c画幅会有优势，因为可以”更接近”被拍摄的物体，也就是赢得的长焦的优势。严格意义上说，这种说法不严谨，因为就拍摄的画面大小而言，aps-c仅仅是取了全画幅中间一部分，也就是视角比全画幅小了，这在视频开始也进行了演示说明（当然，景深是不一样的。）。 就目前来讲，厂家所设计的aps-c画幅相机的像素密度一般都要高于全画幅，所以情况一下，如果将全画幅所拍摄画面裁减为aps-c的视野大小，清晰度是不及aps-c的，如果全画幅像素密度高于aps-c画幅，那么全画幅裁剪后还要比aps-c清晰，那么aps-c画幅相机就没有卖点了。 ","date":"2011-11-06","objectID":"/depth-of-field-aps-c-fullframe/:0:0","tags":["depthoffield","photography","摄影","景深"],"title":"关于全画幅和aps-c画幅景深比较","uri":"/depth-of-field-aps-c-fullframe/"},{"categories":null,"content":"学习操作系统应该多动手 操作过程在xp下进行。 ;;;;;;;;;;;;;;;;;;;;;;;;文件名boot.asm;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; [ORG 0] jmp 07C0h:start start: mov ax,cs mov ds,ax mov es,ax reset: mov ax,0 mov dl,0 int 13h jc reset read: mov ax,1000h mov es,ax mov bx,0 mov ah,2 mov al,5 mov ch,0 mov cl,2 mov dh,0 mov dl,0 int 13h jc read jmp 1000h:0000 times 510-($-$$) db 0 dw 0AA55h ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;以上是boot.asm内容;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;prog.asm;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; [ORG 0] jmp start2 msg db ‘Program Loaded Succeed!Hello, LinuxRen!’,$0 start2: mov ax,cs mov ds,ax mov es,ax mov si,msg print: lodsb cmp al,0 je hang mov ah,0Eh mov bx,7 int 10h jmp print hang: jmp hang times 510-($-$$) db 0 dw 0AA55h ;;;;;;;;;;;;;;;;;;;;;;;;;;以上是prog.asm内容;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 保存好这两个文件，然后在本站下载bochs和nasmw以及partcopy. 安装，然后进入到bochs的目录，建立一个bochsrc.txt文件，内容如下 megs:4 romimage:file=$BXSHARE/BIOS-bochs-latest,address=0xf0000 vgaromimage: $BXSHARE/VGABIOS-elpin-2.40 floppya:1\\_44=FLOPPY.IMG, status=inserted boot:a log:bochsout.txt ok,快完了，再忍忍 然后使用下面的命令将上面的两个.asm文件编译 nasm boot.asm -o boot.bin nasm prog.asm -o prog.bin 会产生两个.bin文件 然后使用partcopy创建img文件，命令如下： partcopy boot.bin 0 200 floppy.img 0 partcopy prog.bin 0 200 floppy.img 200 会生成一个.img文件 将bochsrc.txt放到boch根目录下面，还有刚才的floopy.img文件，然后打开boch.exe按回车 会弹出一个下面的窗口，表明启动成功 OK, Done! 本站所使用工具下载。 ","date":"2006-03-30","objectID":"/write-yourself-a-bootloader/:0:0","tags":["bochs","操作系统","汇编语言"],"title":"自己写一个简单的引导程序","uri":"/write-yourself-a-bootloader/"},{"categories":null,"content":"整个内核引导程序有三个文件，分别是bootsect.s,setup.s,head.s，这三个文件是内核源代码中最先被编译的程序。这3个程序完成的主要功能是当计算机加电时引导内核启动，将内核代码加载到内存中，并作一些进入32位保护运行方式前的系统初始化工作。其中bootsect.s和setup.s程序需要使用as86软件来编译，使用的是as86的汇编语言格式，而head.s需要用GNU as来编译，使用的是AT\u0026T格式的汇编语言。 Bootsect.s程序是磁盘引导块程序，编译后会驻留在磁盘的第一个扇区中，在PC加电ROM BIOS自检后，将被BIOS加载到内存0x7C00处进行执行。 Setup.s程序主要用于读取机器的硬件配置参数，并把内核模块system移动到适当的内存位置处。 Head.s程序会被编译连接在system模块的最前部分，主要进行硬件设备的探测设置和内存管理页面的初始化工作。 Bootsect.s分析 当按机箱上的power on的时候，cpu会自动去到bios中地址0xFFFF0处开始执行bios中的代码，除了会进行一些初始化工作，这段代码最主要的是将可启动设备的第一个扇区（bootsect.s）（引导扇区，512字节）读到内存0x07c00处。 当bootsect.s执行时，它已经被读到了0x07c00处，首先它会将自己读到0x90000处，由于bios被设置成了先读到0x7c00的地方，所以这里需要两步。然后再读到0x90000是为了防止后来读入到0x10000处的system模块覆盖掉bootsect.s。将自己读到0x90000处后先会设置一下堆栈（0x9000:0xff00），然后将setup.s读入到紧接着bootsect的地方（0x90200），默认的是从软盘读取的，然后就是取相应磁盘（被当作软盘，写成了hard code）的参数，然后就是利用bios的0x10中断，ah=0x03，将一段话\"Loading system…“打印到屏幕上。然后检测要使用哪个根文件系统设备（软盘或者硬盘），具体的方法是判断508,509字节处的根设备号是否被置为1.这两个字节在编译内核的时候可以当作参数来设置，默认的是第二个硬盘。因为Linus当时在自己的机器上面有两个硬盘，而Linux的开发是在第二个硬盘上面进行的。 如果有硬盘的话，就将其参数保存，否则读取每磁道的扇区数来判断是什么类型的软盘(1.2M还是1.4M)，也保存其相应参数。 最后执行 jmpi 0,SETUPSEG，跳转到setup.s程序的开始处执行。 这样呢，bootsect.s就完成了自己的使命，其实最重要的就两点，第一个就是加载内核其它的模块，第二个就是将一些重要的参数保存下来，以供以后使用。 Setup.s分析 setup.s会将被bootsect.s读取到0x10000处的system模块移动到0x00000处，这样好象会把中断表给覆盖掉，文件执行到后来会加载中断描述符表，但是idt表却是这个样子的： idt_48: .word 0 .word 0,0 idt表的基地址居然还是0x00000,这里就搞不懂了，因为这个时候0x00000的地方已经是system模块了，所以在真正的重新设置idt表以前，如果出现异常，这里不知道将会出现什么样的情况，这个是0.11设计的一个不足之处。 setup.s会读取大量的参数然后存到0x90000处，也就是说会覆盖bootsect.s，具体的参数分布在《Linux内核完全分析》上有,系统会将第一个硬盘的参数表读到0x90080处，然后再读取第二个硬盘的参数表到0x90090处，然后再去检测到底有没有第二个硬盘，如果没有再将0x90090处的参数表清0，为什么不先检测有没有第二个硬盘，在去决定是否读取参数表到0x90090呢？非要反着来不成？这个也是0.11代码的一个不足之处，造成了次序颠倒。 下面是关于80386保护模式的一些知识。 在16位的实模式下的程序在内存中的布局和操作系统的是混在一起的，也就是说，cpu没有提供对操作系统的保护，这会出很多问题，32为保护模式下,cpu提供的很强大的功能来保护操作系统的代码不被侵犯，我们所要做的就是提供相应的数据，将相应的寄存器初始化，打开A20地址线，然后执行一个跳转指令，cpu就会进入保护模式，对我们的程序进行保护，具体的各位可以在网上找到资料，其中一个方法就是设置gdt以及ldt来保护操作系统以及应用程序，gdt(大小限制在64k以内)也即全局描述符表里包含有全局描述符，每个全局描述符得大小为8字节，所以理论上，一个gdt一共可以有64K/8=8K个全局描述符.其中三个是描述全局性的操作系统的代码段，数据段，其他的一个程序占用一个全局描述符. 系统怎么来确定要使用哪一个全局描述符呢？使用段选择子！下图是段选择子的结构： 其中3-15字节是用来索引gdt来去定某一个全局描述符得，共13位，所以gdt最大长度限制在2^13=64K.但是在这里Linus只将gdt的长度设置为了2K,也就是在 gdt_48: .word 0x800 !这里是0x800,而不是0xFFFF，是因为现在的gdt是临时的，以后还有设置，所以只要够现在用就可以了 .word 512+gdt,0x9 ! 这里由于setup.s是在0x90200处，所以要加上0x200（512）的偏移量。 然后就是为系统进入32为保护模式作准备了，这里就要先初始化gdt,由于现在还没有程序运行，所以只是用了三项（其实是两项），其中，第零项没有使用，第一项描述系统的代码段，第二项描述系统的数据段（堆栈段）。 全局表述符表： gdt: .word 0x0000 ！第0个弃用 .word 0x0000 .word 0x0000 .word 0x0000 .word 0x07FF ！第1个，第0个用了4个word,所以这里偏移量是0x08 .word 0x0000 ！用来描述系统代码段 .word 0x9A00 .word 0x00C0 .word 0x07FF ！第2个，偏移量是0x10，也就是16 .word 0x0000 ！用来描述系统数据段 .word 0x9200 .word 0x00C0 这里是gdt的结构： 这时，进入保护模式所要准备的数据已经够了，接下来就是加载gdt的基地址以及大小限制到专用寄存器gdtr，idt基地址以及大小限制到idtr，然后打开A20数据线，关于A20数据线，哈工大纯c板块上有很好的文章介绍,然后重新对8259进行编程，设置状态字，然后执行jmpi 0,8 ！这里的8就是上面的段选择子的值，化为二进制为 0000,0000,0000,1000 这里的1就是第1个全局描述符，即系统代码段，就会去执行head.s head.s分析 head.s就运行在32位保护模式下面了，这里是名副其实的内核了. GNU的汇编直接数,比如 0x10，如果前面有$，即$0x10，则表示立即数，在16位实模式下，内存地址由段基地址左移四位加上段内偏移量组成，而在保护模式下，由段选择子（由段选择子选择的描述符所决定的段基地址不需要左移，直接加偏移地址就可以形成线性地址）和段内偏移量(逻辑地址)组成，这里是内存管理中的段式管理，还有页式管理，这里有张图片可以很好地说明段式管理： 如果仅仅是0x10，则表示内存的地址。 为什么既有段式内存管理，也有页式内存管理，大概是cpu设计的原因，如果cpu加电直接就可以进入32位，那么段式管理就应该报废了。 head.s第18行，movl $0x10, %eax 之后eax就相当于段选择子，与gdt表的地址进行运算，就可以定为一个全局描述符，在全局表述符中会给出对应段的段基址，再加上已知的段内偏移量，就可以将一个逻辑地址转为一个线性地址，这里的0x10仅仅是段选择子。 然后call setup_idt, setup_idt代码在79行，就是将idt中的每一项都设置为指向同一个中断门ignore_int,即打印一段信息“Unknown interrupt” 在这里说一下idt，idt就是中断描述符表，和全剧描述符表是一个等级的，相应的中断描述符表项和全局描述符表项是对应的，中断门ignore_int是和全局描述符表项所表述的段一个等级的，只不过这里的不是一个段，而可以是一段代码 接着call setup_gdt,gdt在前面已经临时设置过了，在这里要重新设置.这里将gdt还是设置成为含有256个全局描述符表项，第0个不用，第一个系统代码段，第二个系统数据段，值分别是 0x00c09a0000000fff 0x00c09020000000fff，可以对照着本文第三张图来看看具体的意思。 这里将系统代码段和系统数据段的段长都设置成为了16M. 后面的252项都填充0，用于以后用户程序使用。接下来就是检查数学协处理器，还有287/387。然后就是开启分页管理。 这里的分页机制是专门为内核使用的，也就是说以后的应用程序并不适用这里的页表，而是在程序执行的时候自己自动加载自己的页表。 在这里所映射的16M内存其中前1M是专给内核来使用的，应用程序可以通过自己的页表来使用其余的15M,当然，内核也可以使用这15M的空间。 这里的分页比较简单，经过分页之后的物理地址是和分页前的线性地址相同的，这一点是非常重要的。因为在分页启动之前有一句话： pushl $_main 这里是将main函数的地址压栈,当分页启动之后要讲这个地址pop出来，并且跳到main去执行，系统就会跳到以前压入栈的main的地址经过分","date":"2005-04-28","objectID":"/blog-pos-3/:0:0","tags":["bootloader","kernel","linux"],"title":"内核引导启动程序分析","uri":"/blog-pos-3/"}]